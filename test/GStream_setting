Vale, vamos a diagnosticar y arreglar “no puedo abrir GStreamer” paso a paso en Jetson Nano + cámara CSI. Casi siempre es por una de estas causas:

1) Tu OpenCV no tiene soporte GStreamer

Los wheels de pip casi nunca traen GStreamer. Usa el de JetPack (APT).

Compruébalo:

python3 - << 'PY'
import cv2
print("GStreamer en OpenCV:", "GStreamer" in cv2.getBuildInformation())
print(cv2.getBuildInformation().splitlines()[0])
PY


False → instala el OpenCV del sistema y usa ese intérprete:

sudo apt update
sudo apt install -y python3-opencv
which python3
python3 - << 'PY'


import cv2; print("GStreamer en OpenCV:", "GStreamer" in cv2.getBuildInformation())
PY

- Si estabas en un **venv/conda**, puede seguir cargando el `cv2` de pip. Prueba fuera del venv o desinstala ese `cv2`:
```bash
pip uninstall opencv-python opencv-contrib-python -y  # dentro del venv

2) Falta GStreamer o plugins

Instala herramientas y plugins (base/good/bad/ugly/libav) y los de NVIDIA ya vienen con JetPack.

sudo apt install -y gstreamer1.0-tools \
  gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
  gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \
  gstreamer1.0-libav


Verifica que exista el elemento de la cámara CSI:

gst-inspect-1.0 nvarguscamerasrc | head


Si dice No such element → faltan los plugins de NVIDIA (revisa instalación de JetPack/imagen del SO).

Si existe, todo bien.

3) Argus/cámara ocupada o trabada

La cámara CSI (libArgus) solo la puede abrir un proceso a la vez.

sudo systemctl restart nvargus-daemon
# cierra cualquier nvgstcapture-1.0, cheese, etc.

4) Prueba la CSI fuera de OpenCV

Así aislamos el problema.

gst-launch-1.0 nvarguscamerasrc ! \
'video/x-raw(memory:NVMM),width=1280,height=720,framerate=30/1' ! \
nvvidconv ! 'video/x-raw,format=BGR' ! fakesink


Si este falla, primero arregla aquí (conexión del flex a CAM0, orientación correcta, fuente estable).

Si funciona, pasa al siguiente paso.

5) Abre desde OpenCV con un pipeline correcto

Errores comunes: olvidar cv2.CAP_GSTREAMER, pipeline sin appsink, o comillas mal puestas.

import cv2

gst = (
    "nvarguscamerasrc ! "
    "video/x-raw(memory:NVMM), width=1280, height=720, framerate=30/1 ! "
    "nvvidconv flip-method=0 ! "
    "video/x-raw, format=BGR ! "
    "appsink drop=true max-buffers=1 sync=false"
)

cap = cv2.VideoCapture(gst, cv2.CAP_GSTREAMER)
print("isOpened:", cap.isOpened())
ok, frame = cap.read()
print("read:", ok, "shape:" if ok else "", frame.shape if ok else "")
cap.release()


Si isOpened=False: casi seguro es OpenCV sin GStreamer o Argus ocupado. Vuelve a 1) y 3).

6) Mensajes típicos y cómo se arreglan

[ WARN:0] ... GStreamer: cannot find ... → tu cv2 no fue compilado con GStreamer → instala python3-opencv de APT y usa ese Python.

no element "nvarguscamerasrc" en gst-launch → faltan plugins de NVIDIA/Argus → revisa JetPack.

could not open camera / Resource busy → hay otro proceso usando la cámara → reinicia nvargus-daemon y cierra apps.

Pantalla negra → baja a 1280×720@30, quita formatos extra y deja que negocie caps; verifica el flex (bien insertado y al conector CAM0).

7) ¿Estás seguro de que es CSI y no USB?

CSI: usa nvarguscamerasrc (lo de arriba).

USB: usa v4l2src o VideoCapture(0):

gst_usb = ("v4l2src device=/dev/video0 ! "
           "video/x-raw,width=1280,height=720,framerate=30/1 ! "
           "videoconvert ! video/x-raw,format=BGR ! appsink")
cap = cv2.VideoCapture(gst_usb, cv2.CAP_GSTREAMER)

8) Comprobaciones rápidas extra

Ver backend activo:

import cv2; print(cv2.getBuildInformation())


Si corres en SSH sin GUI, tu pipeline con appsink no necesita X/Display. Evita autovideosink en headless.

Reinicio “limpio” si todo falla:

sudo systemctl restart nvargus-daemon
sudo reboot


Si quieres, pégame el mensaje exacto de error que ves al abrir con OpenCV (la primera línea con “GStreamer” o “Argus”) y te digo el fix puntual en una línea. Además, dime si tu sensor es IMX219 (Pi v2) o IMX477 (HQ) y te paso un pipeline optimizado con modos nativos y FPS reales.
